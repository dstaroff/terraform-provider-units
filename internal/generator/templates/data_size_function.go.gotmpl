{{- /*gotype: github.com/dstaroff/terraform-provider-units/internal/generator.Function*/ -}}
// Code generated by go generate; DO NOT EDIT.
/*
 * Copyright (c) {{ .CopyrightInfo.Year }}. {{ .CopyrightInfo.Author }}
 * SPDX-License-Identifier: MPL-2.0
 */

package generated

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/function"
	"github.com/hashicorp/terraform-plugin-framework/types"

	"github.com/dstaroff/terraform-provider-units/internal/converter"
)

var (
{{- range $direction := .Conversion.Directions }}
	_ function.Function = &{{ $direction.Title }}{{ $.Conversion.Unit.Title }}Model{}
{{- end }}
)

{{- range $direction := .Conversion.Directions }}

func New{{ $direction.Title }}{{ $.Conversion.Unit.Title }}Model() function.Function {
	return &{{ $direction.Title }}{{ $.Conversion.Unit.Title }}Model{}
}

type {{ $direction.Title }}{{ $.Conversion.Unit.Title }}Model struct{}

func (f *{{ $direction.Title }}{{ $.Conversion.Unit.Title }}Model) Metadata(_ context.Context, _ function.MetadataRequest, resp *function.MetadataResponse) {
	resp.Name = "{{ $direction.Name }}_{{ $.Conversion.Unit.Short }}"
}

{{- $unitFrom := $.Conversion.Unit.Name -}}
{{- $unitTo := "bytes" -}}
{{- if eq $direction.Name "to" -}}
	{{- $unitFrom = "bytes" -}}
	{{- $unitTo = $.Conversion.Unit.Name -}}
{{- end }}

func (f *{{ $direction.Title }}{{ $.Conversion.Unit.Title }}Model) Definition(_ context.Context, _ function.DefinitionRequest, resp *function.DefinitionResponse) {
	resp.Definition = function.Definition{
		Summary:             "Converts {{ $unitFrom }} to {{ $unitTo }}",
		Description:         "Given data size in {{ $unitFrom }}, converts it to {{ $unitTo }}.",
		MarkdownDescription: "Given data size in **{{ $unitFrom }}**, converts it to **{{ $unitTo }}**.",

		Parameters: []function.Parameter{
			function.NumberParameter{
				Name:                "{{ $unitFrom }}",
				Description:         "Data size in {{ $unitFrom }}",
				MarkdownDescription: "Data size in **{{ $unitFrom }}**",
			},
		},
		Return: function.NumberReturn{},
	}
}

func (f *{{ $direction.Title }}{{ $.Conversion.Unit.Title }}Model) Run(ctx context.Context, req function.RunRequest, resp *function.RunResponse) {
	var {{ $unitFrom }} types.Number

	resp.Error = function.ConcatFuncErrors(resp.Error, req.Arguments.Get(ctx, &{{ $unitFrom }}))
	resp.Error = function.ConcatFuncErrors(resp.Error, resp.Result.Set(ctx, converter.{{ $.Conversion.Unit.Title }}{{ $direction.Opposite.Title }}Bytes({{ $unitFrom }})))
}

{{- end }}
