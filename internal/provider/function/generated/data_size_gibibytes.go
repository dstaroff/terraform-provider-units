// Code generated by go generate; DO NOT EDIT.
/*
 * Copyright (c) 2024. Dmitry Starov
 * SPDX-License-Identifier: MPL-2.0
 */

package generated

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/function"
	"github.com/hashicorp/terraform-plugin-framework/types"

	"github.com/dstaroff/terraform-provider-units/internal/converter"
)

var (
	_ function.Function = &FromGibibytesModel{}
	_ function.Function = &ToGibibytesModel{}
)

func NewFromGibibytesModel() function.Function {
	return &FromGibibytesModel{}
}

type FromGibibytesModel struct{}

func (f *FromGibibytesModel) Metadata(_ context.Context, _ function.MetadataRequest, resp *function.MetadataResponse) {
	resp.Name = "from_gib"
}

func (f *FromGibibytesModel) Definition(_ context.Context, _ function.DefinitionRequest, resp *function.DefinitionResponse) {
	resp.Definition = function.Definition{
		Summary:             "Converts gibibytes to bytes",
		Description:         "Given data size in gibibytes, converts it to bytes.",
		MarkdownDescription: "Given data size in **gibibytes**, converts it to **bytes**.",

		Parameters: []function.Parameter{
			function.NumberParameter{
				Name:                "gibibytes",
				Description:         "Data size in gibibytes",
				MarkdownDescription: "Data size in **gibibytes**",
			},
		},
		Return: function.NumberReturn{},
	}
}

func (f *FromGibibytesModel) Run(ctx context.Context, req function.RunRequest, resp *function.RunResponse) {
	var gibibytes types.Number

	resp.Error = function.ConcatFuncErrors(resp.Error, req.Arguments.Get(ctx, &gibibytes))
	resp.Error = function.ConcatFuncErrors(resp.Error, resp.Result.Set(ctx, converter.GibibytesToBytes(gibibytes)))
}

func NewToGibibytesModel() function.Function {
	return &ToGibibytesModel{}
}

type ToGibibytesModel struct{}

func (f *ToGibibytesModel) Metadata(_ context.Context, _ function.MetadataRequest, resp *function.MetadataResponse) {
	resp.Name = "to_gib"
}

func (f *ToGibibytesModel) Definition(_ context.Context, _ function.DefinitionRequest, resp *function.DefinitionResponse) {
	resp.Definition = function.Definition{
		Summary:             "Converts bytes to gibibytes",
		Description:         "Given data size in bytes, converts it to gibibytes.",
		MarkdownDescription: "Given data size in **bytes**, converts it to **gibibytes**.",

		Parameters: []function.Parameter{
			function.NumberParameter{
				Name:                "bytes",
				Description:         "Data size in bytes",
				MarkdownDescription: "Data size in **bytes**",
			},
		},
		Return: function.NumberReturn{},
	}
}

func (f *ToGibibytesModel) Run(ctx context.Context, req function.RunRequest, resp *function.RunResponse) {
	var bytes types.Number

	resp.Error = function.ConcatFuncErrors(resp.Error, req.Arguments.Get(ctx, &bytes))
	resp.Error = function.ConcatFuncErrors(resp.Error, resp.Result.Set(ctx, converter.GibibytesFromBytes(bytes)))
}
