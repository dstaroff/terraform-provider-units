// Code generated by go generate; DO NOT EDIT.
/*
 * Copyright (c) 2024. Dmitry Starov
 * SPDX-License-Identifier: MPL-2.0
 */

package generated

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/function"
	"github.com/hashicorp/terraform-plugin-framework/types"

	"github.com/dstaroff/terraform-provider-units/internal/converter"
)

var (
	_ function.Function = &FromPebibytesModel{}
	_ function.Function = &ToPebibytesModel{}
)

func NewFromPebibytesModel() function.Function {
	return &FromPebibytesModel{}
}

type FromPebibytesModel struct{}

func (f *FromPebibytesModel) Metadata(_ context.Context, _ function.MetadataRequest, resp *function.MetadataResponse) {
	resp.Name = "from_pib"
}

func (f *FromPebibytesModel) Definition(_ context.Context, _ function.DefinitionRequest, resp *function.DefinitionResponse) {
	resp.Definition = function.Definition{
		Summary:             "Converts pebibytes to bytes",
		Description:         "Given data size in pebibytes, converts it to bytes.",
		MarkdownDescription: "Given data size in **pebibytes**, converts it to **bytes**.",

		Parameters: []function.Parameter{
			function.NumberParameter{
				Name:                "pebibytes",
				Description:         "Data size in pebibytes",
				MarkdownDescription: "Data size in **pebibytes**",
			},
		},
		Return: function.NumberReturn{},
	}
}

func (f *FromPebibytesModel) Run(ctx context.Context, req function.RunRequest, resp *function.RunResponse) {
	var pebibytes types.Number

	resp.Error = function.ConcatFuncErrors(resp.Error, req.Arguments.Get(ctx, &pebibytes))
	resp.Error = function.ConcatFuncErrors(resp.Error, resp.Result.Set(ctx, converter.PebibytesToBytes(pebibytes)))
}

func NewToPebibytesModel() function.Function {
	return &ToPebibytesModel{}
}

type ToPebibytesModel struct{}

func (f *ToPebibytesModel) Metadata(_ context.Context, _ function.MetadataRequest, resp *function.MetadataResponse) {
	resp.Name = "to_pib"
}

func (f *ToPebibytesModel) Definition(_ context.Context, _ function.DefinitionRequest, resp *function.DefinitionResponse) {
	resp.Definition = function.Definition{
		Summary:             "Converts bytes to pebibytes",
		Description:         "Given data size in bytes, converts it to pebibytes.",
		MarkdownDescription: "Given data size in **bytes**, converts it to **pebibytes**.",

		Parameters: []function.Parameter{
			function.NumberParameter{
				Name:                "bytes",
				Description:         "Data size in bytes",
				MarkdownDescription: "Data size in **bytes**",
			},
		},
		Return: function.NumberReturn{},
	}
}

func (f *ToPebibytesModel) Run(ctx context.Context, req function.RunRequest, resp *function.RunResponse) {
	var bytes types.Number

	resp.Error = function.ConcatFuncErrors(resp.Error, req.Arguments.Get(ctx, &bytes))
	resp.Error = function.ConcatFuncErrors(resp.Error, resp.Result.Set(ctx, converter.PebibytesFromBytes(bytes)))
}
